clear;
close all;
clc; 

% Define Initial Condition
x0 = 1; %x(0) = 1
tstop = 1;
tstart = 0;

% dt = 1 approximation
% when dt = 1, what is x(1) according to eulers method
% x(1) = x(0) + dt * f(x(0))
x1 = x0 + ode283(0,x0)
% x(1) = 0, when using dt = 1 in eulers method

% opening a figure
f1 = figure;
%plot analytical solution x(t) = e^-t
% an array containing time values t = [0, 1]
tspan = tstart:0.1:tstop;
% analytical solution x(t) = e^-t
x_act = exp(-tspan);

% plotting actual solution
plot(tspan, x_act, '-red');
hold on;

% plot the 1st order euler method with different dt
% repeating for dt = 10^(-n)
for i = 1:4
    dt = 10^(-i); % dt = 0.1, dt = 0.01, dt = 0.001, dt = 0.0001
    nt = tstop/dt; % figuring out how many timesteps are needed
    tt = zeros(1,nt); % initializing an array full of zeros
    xt = zeros(1,nt);
    tt(1) = tstart; 
    xt(1) = x0;
    % this is where the eulers method is implemented 
    for j = 2:nt
        tt(j) = tt(j-1) + dt;
        % x_n+1 = x_n + dt*(f(x_n))
        xt(j) = xt(j-1) + dt*ode283(tt(j-1),xt(j-1));
    end
    plot(tt,xt, '--') ;
end

legend('Actual', 'n = 1', 'n = 2', 'n = 3', 'n = 4')

